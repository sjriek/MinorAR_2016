// Generated by gencpp from file dynamixel_hr_ros/CommandPosition.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_HR_ROS_MESSAGE_COMMANDPOSITION_H
#define DYNAMIXEL_HR_ROS_MESSAGE_COMMANDPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_hr_ros
{
template <class ContainerAllocator>
struct CommandPosition_
{
  typedef CommandPosition_<ContainerAllocator> Type;

  CommandPosition_()
    : id()
    , angle()
    , speed()  {
    }
  CommandPosition_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , angle(_alloc)
    , speed(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _id_type;
  _id_type id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_type;
  _angle_type angle;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _speed_type;
  _speed_type speed;




  typedef boost::shared_ptr< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> const> ConstPtr;

}; // struct CommandPosition_

typedef ::dynamixel_hr_ros::CommandPosition_<std::allocator<void> > CommandPosition;

typedef boost::shared_ptr< ::dynamixel_hr_ros::CommandPosition > CommandPositionPtr;
typedef boost::shared_ptr< ::dynamixel_hr_ros::CommandPosition const> CommandPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dynamixel_hr_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dynamixel_hr_ros': ['/media/lectoraat/Files/Fontys_SCARA_Arm/src/dynamixel_hr_ros/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2febf30337287dc745140e050314732";
  }

  static const char* value(const ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2febf30337287dcULL;
  static const uint64_t static_value2 = 0x745140e050314732ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_hr_ros/CommandPosition";
  }

  static const char* value(const ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] id\n\
float32[] angle\n\
float32[] speed\n\
";
  }

  static const char* value(const ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.angle);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CommandPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_hr_ros::CommandPosition_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_HR_ROS_MESSAGE_COMMANDPOSITION_H
